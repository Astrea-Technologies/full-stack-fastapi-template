[project]
name = "app"
version = "0.1.0"
description = "A modern FastAPI backend template with SQLModel, PostgreSQL, and JWT authentication"
requires-python = ">=3.10,<4.0"
dependencies = [
    "fastapi[standard]<1.0.0,>=0.114.2",
    "python-multipart<1.0.0,>=0.0.7",
    "email-validator<3.0.0.0,>=2.1.0.post1",
    "passlib[bcrypt]<2.0.0,>=1.7.4",
    "tenacity<9.0.0,>=8.2.3",
    "pydantic>2.0",
    "emails<1.0,>=0.6",
    "jinja2<4.0.0,>=3.1.4",
    "alembic<2.0.0,>=1.12.1",
    "httpx<1.0.0,>=0.25.1",
    "psycopg[binary]<4.0.0,>=3.1.13",
    "sqlmodel<1.0.0,>=0.0.21",
    # Pin bcrypt until passlib supports the latest
    "bcrypt==4.0.1",
    "pydantic-settings<3.0.0,>=2.2.1",
    "sentry-sdk[fastapi]<2.0.0,>=1.40.6",
    "pyjwt<3.0.0,>=2.8.0",
    
    # Database Clients
    "motor==3.3.2",                # MongoDB async driver (fixed version for compatibility)
    "pymongo==4.5.0",              # MongoDB sync driver (fixed version for compatibility)
    "redis<5.0.0,>=4.6.0",         # Redis client
    "pinecone-client==2.2.1",      # Pinecone vector DB client (fixed at 2.2.1)
    
    # Task Processing
    "celery<6.0.0,>=5.3.0",        # Task queue
    "flower<2.0.0,>=1.2.0",        # Celery monitoring tool
    # "confluent-kafka<2.0.0,>=1.0.0", # Kafka client - requires system dependencies
    "aiokafka<1.0.0,>=0.8.1",      # Async Kafka client (pure Python alternative)
    "pika<2.0.0,>=1.3.2",          # RabbitMQ client
    
    # ML/NLP
    "spacy>=3.7.0,<3.8.0",         # NLP library
    "transformers<5.0.0,>=4.28.0", # Hugging Face Transformers
    "sentence-transformers<3.0.0,>=2.2.2", # Sentence embeddings
    "scikit-learn<1.4.0,>=1.3.0",  # Machine learning library
    # "torch>=2.0.0,<3.0.0",       # PyTorch - install separately if needed
    "numpy<2.0.0,>=1.24.0",        # Required for ML operations
    "pandas<2.0.0,>=1.5.3",        # Data processing
    # Optional - not used in MVP
    # "redis-py-cluster>=2.1.3; python_version >= '3.8'"
]

[tool.uv]
dev-dependencies = [
    "pytest<8.0.0,>=7.4.3",
    "mypy<2.0.0,>=1.8.0",
    "ruff<1.0.0,>=0.2.2",
    "pre-commit<4.0.0,>=3.6.2",
    "pytest-cov<5.0.0,>=4.1.0",
    "types-passlib<2.0.0.0,>=1.7.7.20240106",
    "coverage<8.0.0,>=7.4.3",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
